load_module modules/ndk_http_module.so; 
load_module modules/ngx_http_lua_module.so;
load_module modules/ngx_stream_lua_module.so;
error_log stderr info;
worker_processes auto;
env GRAFANA_TOKEN;

events {
    multi_accept on;
    use epoll;
}

http {
    lua_shared_dict grafana_cache 10m;
    resolver 127.0.0.11; # Docker local DNS
    resolver_timeout 5s;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   60s;
    client_body_timeout 60s;
    client_header_timeout 60s;
    proxy_connect_timeout 60s;
    proxy_read_timeout    60s;
    proxy_send_timeout    60s;
    proxy_request_buffering on;
    proxy_buffering on;
    lua_package_path "/usr/local/lib/lua/?.lua;;";

    server {
        listen 9999 reuseport;
        location / {
            access_log off;
            access_by_lua_block {
                local cjson = require "cjson.safe"
                local http  = require "resty.http"
                local hdr   = ngx.req.get_headers()["X-Grafana-Org-Id"]
                if hdr then
                    local cache = ngx.shared.grafana_cache
                    local name  = cache:get(hdr)
                    if not name then
                        local httpc = http.new()
                        httpc:set_timeout(3000)
                        local res, err = httpc:request_uri(
                            "http://grafana:3000/api/orgs/"..hdr,
                            {
                                method  = "GET",
                                headers = {
                                    ["Authorization"] = "Bearer " .. os.getenv("GRAFANA_TOKEN"),
                                    ["Accept"]        = "application/json",
                                },
                            }
                        )
                        if res and res.status==200 then
                            local obj = cjson.decode(res.body)
                            name = obj and obj.name
                            if name then
                                cache:set(hdr, name, 300)
                            end
                        else
                            ngx.log(ngx.ERR, "Grafana API error: ", err or res.status)
                        end
                        httpc:set_keepalive(60000, 50)
                    end
                    if name then
                        ngx.req.set_header("X-Scope-OrgID", name)
                    end
                end
            }

            proxy_pass         http://mimir:9009;
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            proxy_cache_bypass  $http_cache_control;
        }
    }
}